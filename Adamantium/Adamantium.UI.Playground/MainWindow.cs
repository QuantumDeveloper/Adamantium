using System;
using Adamantium.Core.Collections;
using Adamantium.Engine.Compiler.Converter.AutoGenerated;
using Adamantium.Engine.Graphics;
using Adamantium.Mathematics;
using Adamantium.UI.Controls;
using Adamantium.UI.Input;
using Adamantium.UI.Media;
using Polygon = Adamantium.UI.Controls.Polygon;
using Rectangle = Adamantium.UI.Controls.Rectangle;

namespace Adamantium.UI.Playground
{
    public class MainWindow : Window
    {
        private Path path = null;
        private ArcSegment arcSegment;
        public MainWindow()
        {
            Width = 1280;
            Height = 720;
            //MSAALevel = MSAALevel.X8;
            FillControls();
        }

        private void FillControls()
        {
            var grid = new Grid();
            
            rectangle = new Rectangle();
            rectangle.CornerRadius = new CornerRadius(0, 40, 0, 40);
            rectangle.Width = 200;
            rectangle.Height = 200;
            rectangle.HorizontalAlignment = HorizontalAlignment.Center;
            rectangle.Fill = Brushes.Chocolate;
            rectangle.Margin = new Thickness(0, 0, 1, 0);
            rectangle.Stroke = Brushes.CornflowerBlue;
            rectangle.StrokeThickness = 5;
            rectangle.StrokeDashOffset = 10;
            rectangle.ClipToBounds = false;
            rectangle.StartLineCap = PenLineCap.ConvexRound;
            rectangle.EndLineCap = PenLineCap.ConvexRound;
            rectangle.StrokeDashArray = new TrackingCollection<double>() { 0, 5 };

            ellipse = new Ellipse();
            ellipse.Width = 150;
            ellipse.Height = 150;
            ellipse.Stretch = Stretch.UniformToFill;
            ellipse.HorizontalAlignment = HorizontalAlignment.Left;
            ellipse.VerticalAlignment = VerticalAlignment.Stretch;
            ellipse.Fill = Brushes.Crimson;
            ellipse.Margin = new Thickness(1, 0, 0, 1);
            ellipse.StrokeThickness = 5;
            ellipse.Stroke = Brushes.Green;
            ellipse.StrokeDashArray = new TrackingCollection<double>() { 12, 5 };

            var line = new Line();
            line.X1 = 50;
            line.Y1 = 150;
            line.X2 = 250;
            line.Y2 = 150;
            line.StrokeThickness = 5;
            line.Width = 200;
            line.Height = 200;
            line.VerticalAlignment = VerticalAlignment.Center;
            line.HorizontalAlignment = HorizontalAlignment.Center;
            line.Stroke = Brushes.Black;
            line.StrokeThickness = 5;
            line.Fill = Brushes.Coral;

            polygon = new Polygon();
            polygon.Width = 200;
            polygon.Points = new PointsCollection();
            polygon.Points.Add(new Vector2(10, 80));
            polygon.Points.Add(new Vector2(190, 80));
            polygon.Points.Add(new Vector2(30, 190));
            polygon.Points.Add(new Vector2(100, 10));
            polygon.Points.Add(new Vector2(170, 190));
            polygon.Fill = Brushes.Red;
            polygon.FillRule = FillRule.NonZero;
            polygon.HorizontalAlignment = HorizontalAlignment.Left;
            polygon.ClipToBounds = false;
            polygon.StrokeThickness = 2;
            polygon.Stroke = Brushes.Black;
            polygon.StrokeDashArray = new TrackingCollection<double>() { 20, 10, 10, 10, 4, 20 };

            path = new Path();
            path.HorizontalAlignment = HorizontalAlignment.Center;
            path.VerticalAlignment = VerticalAlignment.Center;
            path.StrokeThickness = 0;
            path.Stroke = Brushes.CornflowerBlue;
            path.StrokeLineJoin = PenLineJoin.Miter;
            path.Fill = Brushes.Black;
            CombinedGeometry combinedGeometry = new CombinedGeometry();
            combinedGeometry.GeometryCombineMode = GeometryCombineMode.Union;
            var innerCombinedGeometry = new CombinedGeometry();
            innerCombinedGeometry.GeometryCombineMode = GeometryCombineMode.Exclude;
            innerCombinedGeometry.Geometry1 = new EllipseGeometry(new Vector2(100), 80, 80);
            innerCombinedGeometry.Geometry2 = new EllipseGeometry(new Vector2(100), 65, 65);

            var rectangleGeometry = new RectangleGeometry(new Rect(30, 93, 140, 15), new CornerRadius(0));
            var rectangleGeometry2 = new RectangleGeometry(new Rect(50, 50, 50, 50), new CornerRadius(0));
            rectangleGeometry.Transform = new Transform();
            rectangleGeometry.Transform.RotationAngle = 16;
            rectangleGeometry.Transform.RotationCenterX = 100;
            rectangleGeometry.Transform.RotationCenterY = 100;
            
            combinedGeometry.Geometry1 = innerCombinedGeometry;
            combinedGeometry.Geometry2 = rectangleGeometry;

            //innerCombinedGeometry.Geometry2 = rectangleGeometry;
            
            path.Data = rectangleGeometry2;

            //var xamlIcon = "M3,4H17V8H20L23,12V17H21A3,3 0 0,1 18,20A3,3 0 0,1 15,17H9A3,3 0 0,1 6,20A3,3 0 0,1 3,17H1V6C1,4.89 1.9,4 3,4M17,9.5V12H21.47L19.5,9.5H17M6,15.5A1.5,1.5 0 0,0 4.5,17A1.5,1.5 0 0,0 6,18.5A1.5,1.5 0 0,0 7.5,17A1.5,1.5 0 0,0 6,15.5M18,15.5A1.5,1.5 0 0,0 16.5,17A1.5,1.5 0 0,0 18,18.5A1.5,1.5 0 0,0 19.5,17A1.5,1.5 0 0,0 18,15.5M8,14L14,8L12.59,6.58L8,11.17L5.91,9.08L4.5,10.5L8,14Z";
            //var xamlIcon = "M14.12,10H19V8.2H15.38L13.38,4.87C13.08,4.37 12.54,4.03 11.92,4.03C11.74,4.03 11.58,4.06 11.42,4.11L6,5.8V11H7.8V7.33L9.91,6.67L6,22H7.8L10.67,13.89L13,17V22H14.8V15.59L12.31,11.05L13.04,8.18M14,3.8C15,3.8 15.8,3 15.8,2C15.8,1 15,0.2 14,0.2C13,0.2 12.2,1 12.2,2C12.2,3 13,3.8 14,3.8Z";
            var xamlIcon = "M9,12C9,11.19 9.3,10.5 9.89,9.89C10.5,9.3 11.19,9 12,9C12.81,9 13.5,9.3 14.11,9.89C14.7,10.5 15,11.19 15,12C15,12.81 14.7,13.5 14.11,14.11C13.5,14.7 12.81,15 12,15C11.19,15 10.5,14.7 9.89,14.11C9.3,13.5 9,12.81 9,12M5.53,8.44L7.31,10.22L5.53,12L7.31,13.78L5.53,15.56L2,12L5.53,8.44M8.44,18.47L10.22,16.69L12,18.47L13.78,16.69L15.56,18.47L12,22L8.44,18.47M18.47,15.56L16.69,13.78L18.47,12L16.69,10.22L18.47,8.44L22,12L18.47,15.56M15.56,5.53L13.78,7.31L12,5.53L10.22,7.31L8.44,5.53L12,2L15.56,5.53Z";
            //path.Data = Geometry.Parse(xamlIcon);
            // path.Data.Transform = new Transform();
            // path.Data.Transform.ScaleX = 5;
            // path.Data.Transform.ScaleY = 5;
            //var geom = path.Data as PathGeometry;
            //geom.FillRule = FillRule.NonZero;
            // var f = geom.Figures[2];
            // geom.Figures.Clear();
            // geom.Figures.Add(f);
            var pathGeometry = new PathGeometry();
            pathGeometry.FillRule = FillRule.NonZero;
            pathGeometry.IsClosed = true;
            var pathFigure = new PathFigure();
            pathFigure.StartPoint = new Vector2(150, 100);
            pathFigure.Segments = new PathSegmentCollection();
            pathFigure.IsFilled = true;
            pathFigure.IsClosed = true;
            // var segment = new PolylineSegment();
            // segment.Points = new PointsCollection();
            // segment.Points.Add(new Vector2(100, 10));
            // segment.Points.Add(new Vector2(200, 100));
            // pathFigure.Segments.Add(segment);
            var lineSegment = new LineSegment();
            lineSegment.Point = new Vector2(250, 250);
            arcSegment = new ArcSegment();
            arcSegment.IsStroked = true;
            arcSegment.Point = new Vector2(250,150);
            arcSegment.Size = new Size(150, 200);
            arcSegment.RotationAngle = 0;
            arcSegment.IsLargeArc = false;
            arcSegment.SweepDirection = SweepDirection.Clockwise;
            
            var lineSegment2 = new LineSegment();
            lineSegment2.Point = new Vector2(1000, 270);
            
            //pathFigure.Segments.Add(lineSegment);
            pathFigure.Segments.Add(arcSegment);
            //pathFigure.Segments.Add(lineSegment2);

            //path.Data = pathGeometry;

            // var bSplineSegment = new NurbsSegment();
            // bSplineSegment.Points = new PointsCollection();
            // bSplineSegment.Points.Add(new Vector2(150, 100));
            // bSplineSegment.Points.Add(new Vector2(250, 350));
            // bSplineSegment.Points.Add(new Vector2(370, 300));
            // bSplineSegment.Points.Add(new Vector2(490, 590));
            // bSplineSegment.Points.Add(new Vector2(510, 190));
            // bSplineSegment.IsUniform = false;
            // bSplineSegment.UseCustomDegree = true;
            // bSplineSegment.CustomDegree = 5;
            // pathFigure.Segments.Add(bSplineSegment);

            var cubic = new CubicBezierSegment();
            cubic.ControlPoint1 = new Vector2(400, 300);
            cubic.ControlPoint2 = new Vector2(800, 300);
            cubic.Point = new Vector2(800, 200);
            //pathFigure.Segments.Add(cubic);
            var quadratic = new QuadraticBezierSegment();
            quadratic.ControlPoint = new Vector2(820, 400);
            quadratic.Point = new Vector2(950, 400);
            //pathFigure.Segments.Add(quadratic);
            
            //segment.Points.Add(new Vector2(205, 50));
            pathGeometry.Figures = new PathFigureCollection();
            pathGeometry.Figures.Add(pathFigure);
            
            //path.Data = pathGeometry;
            
            KeyDown += OnKeyDown;

            var bspline = new BSpline();
            bspline.Points = new PointsCollection();
            bspline.Points.Add(new Vector2(10, 20));
            bspline.Points.Add(new Vector2(40, 0));
            bspline.Points.Add(new Vector2(50, 50));
            bspline.Points.Add(new Vector2(140, 100));
            bspline.Points.Add(new Vector2(40, 60));
            bspline.Points.Add(new Vector2(70, 5));
            bspline.Stroke = Brushes.Blue;
            bspline.StrokeThickness = 2;
            bspline.HorizontalAlignment = HorizontalAlignment.Center;
            bspline.VerticalAlignment = VerticalAlignment.Center;

            var border = new Border();
            border.CornerRadius = new CornerRadius(0, 10, 0, 10);
            border.BorderThickness = new Thickness(10, 5, 4, 0);
            border.Child = bspline;
            border.VerticalAlignment = VerticalAlignment.Center;
            border.HorizontalAlignment = HorizontalAlignment.Center;
            border.Background = Brushes.Crimson;
            border.BorderBrush = Brushes.CornflowerBlue;
            border.Width = 400;
            border.Height = 300;

            grid.Background = Brushes.White;
            grid.Children.Add(rectangle);
            // grid.Children.Add(ellipse);
            // grid.Children.Add(line);
            // grid.Children.Add(polygon);
             grid.Children.Add(path);
            //grid.Children.Add(border);

            Content = grid;
        }

        private Polygon polygon;
        private Rectangle rectangle;
        private Ellipse ellipse;

        private void OnKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.RightArrow)
            {
                // var combined = path.Data as CombinedGeometry;
                // var mode = (int)combined.GeometryCombineMode;
                // if (mode == 3) mode = -1;
                //
                // mode++;
                // combined.GeometryCombineMode = (GeometryCombineMode)mode;
            }
            
            // if (e.Key == Key.LeftArrow)
            // {
            //     var combined = path.Data as CombinedGeometry;
            //     var mode = (int)combined.GeometryCombineMode;
            //     if (mode == 0) mode = 4;
            //
            //     mode--;
            //     combined.GeometryCombineMode = (GeometryCombineMode)mode;
            // }

            if (e.Key == Key.UpArrow)
            {
                // ++polygon.StrokeDashOffset;
                // Console.WriteLine($"OFFSET: {polygon.StrokeDashOffset}");
                arcSegment.RotationAngle++;
                //var geom = path.Data as PathGeometry;
                //var nurbs = geom.Figures[0].Segments[1] as ArcSegment;
                //nurbs.IsUniform = true;
                //nurbs.RotationAngle++;
                var com = path.Data as CombinedGeometry;
                com.Geometry2.Transform.RotationAngle++;
                //com.Geometry2.InvalidateGeometry();
                //path.Data.InvalidateGeometry();
                path.InvalidateMeasure();
            }

            if (e.Key == Key.DownArrow)
            {
                arcSegment.RotationAngle--;
                // var geom = path.Data as PathGeometry;
                // var nurbs = geom.Figures[0].Segments[1] as ArcSegment;
                // nurbs.RotationAngle--;
                //nurbs.IsUniform = false;
                
                var com = path.Data as CombinedGeometry;
                com.Geometry2.Transform.RotationAngle--;
                //com.Geometry2.InvalidateGeometry();
                //path.Data.InvalidateGeometry();
                path.InvalidateMeasure();
            }

            if (e.Key == Key.LeftArrow)
            {
                //polygon.FillRule = FillRule.EvenOdd;
                var geom = path.Data as PathGeometry;
                var nurbs = geom.Figures[0].Segments[0] as NurbsSegment;
                nurbs.CustomDegree--;
            }

            if (e.Key == Key.RightArrow)
            {
                polygon.FillRule = FillRule.NonZero;
                var geom = path.Data as PathGeometry;
                var nurbs = geom.Figures[0].Segments[0] as NurbsSegment;
                nurbs.CustomDegree++;
            }
        }
    }
}