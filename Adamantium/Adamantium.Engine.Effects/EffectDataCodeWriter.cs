using System.IO;
using System.Text;

namespace Adamantium.Engine.Effects
{
   public class EffectDataCodeWriter
   {
      /// <summary>
      /// Gets or sets the class declaration (Default: "public partial").
      /// </summary>
      public string ClassDeclaration = "public partial";

      /// <summary>
      /// Gets or sets the namespace.
      /// </summary>
      public string Namespace;

      /// <summary>
      /// Gets or sets the class name.
      /// </summary>
      public string ClassName;

      /// <summary>
      /// Gets or sets the field declaration (default: "private").
      /// </summary>
      public string FieldDeclaration = "private";

      /// <summary>
      /// Gets or sets the field name (default: "effectByteCode").
      /// </summary>
      public string FieldName = "effectByteCode";

      /// <summary>
      /// Write effect data in text form to the file as byte array
      /// </summary>
      /// <param name="effectData"></param>
      /// <param name="writer"></param>
      public void Write(EffectData effectData, TextWriter writer)
      {
         const string codeTemplate =
@"//------------------------------------------------------------------------------
// <auto-generated>
//     File Generated using Adamantium Engine compiler.
{0}  
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace {1} 
{{
    {2} class {3}
    {{
        {4} static readonly Adamantium.Engine.Common.Effects.EffectData {5} = Adamantium.Engine.Common.Effects.EffectData.Load(new byte[] {{
{6}
        }});
    }}
}}
";

         var effectToGenerateText = new StringBuilder();
         effectToGenerateText.AppendFormat("//     Effect [{0}]\r\n", effectData.Description.Name);

         var buffer = new MemoryStream();
         effectData.Save(buffer);

         var bufferAsText = new StringBuilder();
         var bufferArray = buffer.ToArray();
         for (int i = 0; i < bufferArray.Length; i++)
         {
            bufferAsText.Append(bufferArray[i]).Append(", ");
            if (i > 0 && (i % 64) == 0)
            {
               bufferAsText.AppendLine();
            }
         }

         writer.Write(codeTemplate,
                      effectToGenerateText, // {0} 
                      Namespace,            // {1} 
                      ClassDeclaration,     // {2} 
                      ClassName,            // {3} 
                      FieldDeclaration,     // {4} 
                      FieldName,            // {5} 
                      bufferAsText);        // {6} 

         writer.Flush();
      }
   }
}
